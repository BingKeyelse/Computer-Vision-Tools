from libs import*

class CameraFunctions:
    def __init__(self, ui, cameras, timer_0, canvas):
        """
        ## K·∫ø th·ª´a c√°c gi√° tr·ªã t·ª´ mainWindow
        - ui: ph·∫ßn giao di·ªán th·ª´a k·∫ø
        - cameras: th·ª´a k·∫ø to√†n b·ªô gi√° tr·ªã Camera
        - timer: b·ªô ƒë·∫øm timer
        - canvas: ph·∫ßn th·ª´a k·∫ø ƒë·ªÉ hi·ªán th·ªã ·∫£nh ·ªü ph·∫ßn ch√≠nh gi·ªØa ƒë·ªÉ ch·∫°y ph·∫ßn camera Realtime
        
        """
        self.ui = ui
        self.canvas = canvas
        self.timer_0 = timer_0
        self.cameras = cameras

        self.active_cam = None
        self.active_name = None

        self.ui.btn_check_cam.clicked.connect(self.check_cameras)

        self.ui.btn_trigsoft.clicked.connect(self.capture_frame)

        # G·∫Øn signal thay ƒë·ªïi camera
        self.ui.btn_choose_cam.addItem("None")
        self.ui.btn_choose_cam.currentTextChanged.connect(self.select_camera)
        self.timer_0.timeout.connect(self.update_frame)

    def check_cameras(self)-> None:
        """
        ## Ki·ªÉm tra camera check xem c√°i n√†o ƒëang c√≥
        """
        # üö´ T·∫°m ch·∫∑n signal ƒë·ªÉ tr√°nh g·ªçi select_camera('') khi clear
        self.ui.btn_choose_cam.blockSignals(True)
        self.ui.btn_choose_cam.clear()
        self.ui.btn_choose_cam.addItem("None")

        available = []
        for name, cam in self.cameras.items():
            cam.connect() # Cho ch√∫ng n√≥ k·∫øt n·ªëi h·∫øt lu√¥n ƒëi
            if cam.connected:
                self.ui.btn_choose_cam.addItem(name)
                available.append(name)

        # N·∫øu camera ƒëang active v·∫´n c√≤n trong danh s√°ch th√¨ gi·ªØ nguy√™n
        if self.active_name and self.active_name in available:
            self.ui.btn_choose_cam.setCurrentText(self.active_name)
        else:
            # N·∫øu active kh√¥ng c√≤n th√¨ reset
            self.active_cam = None
            self.active_name = None
            self.ui.btn_choose_cam.setCurrentText("None")
            # self.label.setText("No Camera")
            self.timer_0.stop()

        self.ui.btn_choose_cam.blockSignals(False)

    def select_camera(self, name) -> None:
        """
        ## L·ª±a ch·ªçn camera s·∫Ω ƒë∆∞u·ªçc hi·ªÉn th·ªã 
        - name: t√™n c·ªßa ƒë·ªëi t∆∞·ª£ng camera s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông tuy·ªÅn v√†o
        """
        if not name or name == "None":  
            '''
            Khi m√† kh√¥ng c√≥ cam th√¨ clear n√≥ ƒëi v√† nh·ªõ c·∫≠p nh·∫≠p ·ªü canvas
            '''
            self.active_cam = None
            self.active_name = None
            self.canvas.clear_image()
            self.timer_0.stop()
            return

        if name not in self.cameras:
            return

        cam = self.cameras[name] # L·∫•y to√†n b·ªô ƒë·ªëi t∆∞·ª£ng ra lu√¥n
        if not cam.connected:
            QMessageBox.warning(self, "Warning", f"{name} ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi! H√£y b·∫•m 'Check All Cameras' tr∆∞·ªõc.")
            self.combo.setCurrentText("None")
            return

        self.active_cam = cam
        self.active_name = name
        self.timer_0.start(30)

    def update_frame(self):
        """
        ## Hi·ªÉn th·ªã video thu th·∫≠p l√™n tr√™n canvas + Timer 0
        """
        if self.active_cam:
            frame = self.active_cam.get_frame()
            if frame is not None: 
                self.canvas.set_image(frame, link_image = None)
            else:
                '''Camera m·∫•t k·∫øt n·ªëi khi ƒëang stream'''
                self.timer_0.stop()
                self.active_cam = None
                self.active_name = None
                self.ui.btn_choose_cam.setCurrentText("None")

    def capture_frame(self)-> None:
        """
        D√πng ƒë·ªÉ ch·ª•p ·∫£nh l·∫°i v√† s·∫Ω l∆∞u v√†o folder
        """
        if self.active_cam:
            frame = self.active_cam.get_frame()
            if frame is not None:
                cv2.imshow(f"Captured from {self.active_name}", frame)
                cv2.waitKey(1)

