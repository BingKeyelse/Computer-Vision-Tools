from libs import*

class CameraChecker(QThread):
    finished = pyqtSignal(list)

    def __init__(self, cameras, devices, tl_factory, ui):
        """
        ## Scan camera ƒëang c√≥
        - Args:
            - cameras: truy·ªÅn v√†o th√¥ng tin camera ƒë∆∞·ª£c khai b√°o ƒë·ªÉ qu√©t
        """
        super().__init__()
        self.cameras = cameras
        self.devices = devices
        self.tl_factory = tl_factory
        self.ui = ui

    def run(self):
        """
        ## Emit data nh·ªØng cam ƒë∆∞·ª£c qu√©t ƒë·ªÉ tr·ªü v·ªÅ h√†m k·∫øt n·ªëi
        """
        self.ui.btn_choose_cam.blockSignals(True)
        self.ui.btn_choose_cam.clear()
        self.ui.btn_choose_cam.addItem("None")

        available = []
        for name, cam in self.cameras.items():                         
            cam.connect(self.devices, self.tl_factory)
            if cam.connected:
                self.ui.btn_choose_cam.addItem(name)
                available.append(name)
        self.finished.emit(available)  # g·ª≠i l·∫°i k·∫øt qu·∫£

class CameraFunctions:
    def __init__(self, ui, cameras, timer_0, canvas_Camera):
        """
        ## K·∫ø th·ª´a c√°c gi√° tr·ªã t·ª´ mainWindow
        - ui: ph·∫ßn giao di·ªán th·ª´a k·∫ø
        - cameras: th·ª´a k·∫ø to√†n b·ªô gi√° tr·ªã Camera
        - timer: b·ªô ƒë·∫øm timer
        - canvas_Camera: ph·∫ßn th·ª´a k·∫ø ƒë·ªÉ hi·ªán th·ªã ·∫£nh ·ªü ph·∫ßn ch√≠nh gi·ªØa ƒë·ªÉ ch·∫°y ph·∫ßn camera Realtime
        """

        self.ui = ui
        self.canvas_Camera = canvas_Camera
        self.timer_0 = timer_0
        self.cameras = cameras

        self.active_cam = None
        self.active_name = None

        self.ui.btn_check_cam.clicked.connect(self.init_cam)

        self.ui.btn_trigsoft.clicked.connect(self.capture_frame)

        # G·∫Øn signal thay ƒë·ªïi camera
        self.ui.btn_choose_cam.addItem("None")
        self.ui.btn_choose_cam.currentTextChanged.connect(self.select_camera)
        self.timer_0.timeout.connect(self.update_frame)
    
    def init_cam(self):
        """
        - Kiem tra so luong camera o trong thread main de tranh loi
        - Sau do goi phuong thuc check_cameras()
        """
        self.ui.btn_check_cam.setText("üîÑChecking...")
        self.timer_0.stop()
        self.tl_factory = pylon.TlFactory.GetInstance()
        self.devices = self.tl_factory.EnumerateDevices()
        if not self.devices:
            self.connected = False
        self.check_cameras()
    
    def check_cameras(self):
        """
        ## Ki·ªÉm tra xem c√≥ camera n√†o ƒëang ƒë∆∞·ª£c m·ªü kh√¥ng
        - K·∫øt n·ªõi v·ªõi m·ªôt thread ƒë·ªÉ check camera
        - Emit singal ƒë·∫øn h√†m self._on_check_done ƒë·ªÉ c·∫≠p nh·∫≠p giao di·ªán
        """
        

        self.thread = CameraChecker(self.cameras, self.devices, self.tl_factory, self.ui)
        self.thread.finished.connect(self._on_check_done)
        self.thread.start()  # ‚úÖ start m√† kh√¥ng block UI
    
    def _on_check_done(self, available):
        """
        ## Sau khi check cam xong th√¨ ƒëi·ªÅu ch·ªânh giao di·ªán
        - ƒêo·∫°n n√†y c√≥ check th√¥ng tin xem c√≥ ƒëang m·ªü c√°i cam ƒë∆∞·ª£c ch·ªçn kh√¥ng ƒë√≥ ·∫•y nh√©
        - Inputs:
            - available: l√† th√¥ng tin cam nh·∫≠n ƒë∆∞·ª£c t·ª´ Thread Scan Camera - singal
        """
        # ‚úÖ T∆∞∆°ng t·ª± nh∆∞ sau khi join ‚Äî b·∫°n x·ª≠ l√Ω ·ªü ƒë√¢y
        # self.ui.btn_choose_cam.blockSignals(True)
        # self.ui.btn_choose_cam.clear()
        # self.ui.btn_choose_cam.addItem("None")
        self.ui.btn_check_cam.setText("Check Cam")

        # for name in available:
        #     self.ui.btn_choose_cam.addItem(name)
        
        if self.active_name and self.active_name in available:
            self.ui.btn_choose_cam.setCurrentText(self.active_name)
        else:
            self.active_cam = None
            self.active_name = None
            self.ui.btn_choose_cam.setCurrentText("None")
            self.timer_0.stop()

        
        self.ui.stackwidget.setCurrentWidget(self.ui.page_main)
        self.ui.btn_choose_cam.blockSignals(False)
        self.thread.quit()
        self.thread.wait()  # t∆∞∆°ng ƒë∆∞∆°ng join nh∆∞ng kh√¥ng block UI
        self.timer_0.start(30)

    def select_camera(self, name) -> None:
        """
        ## L·ª±a ch·ªçn camera s·∫Ω ƒë∆∞u·ªçc hi·ªÉn th·ªã 
        - name: t√™n c·ªßa ƒë·ªëi t∆∞·ª£ng camera s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông tuy·ªÅn v√†o
        """
        if not name or name == "None":  
            '''
            Khi m√† kh√¥ng c√≥ cam th√¨ clear n√≥ ƒëi v√† nh·ªõ c·∫≠p nh·∫≠p ·ªü canvas_Camera
            '''
            self.active_cam = None
            self.active_name = None
            self.canvas_Camera.clear_image()
            self.timer_0.stop()
            return

        if name not in self.cameras:
            return
        
        cam = self.cameras[name] # L·∫•y to√†n b·ªô ƒë·ªëi t∆∞·ª£ng ra lu√¥n
        if not cam.connected:
            # QMessageBox.warning(self, "Warning", f"{name} ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi! H√£y b·∫•m 'Check All Cameras' tr∆∞·ªõc.")
            # self.combo.setCurrentText("None")
            return None

        self.active_cam = cam
        self.active_name = name
        self.timer_0.start(30)

    def update_frame(self):
        """
        ## Hi·ªÉn th·ªã video thu th·∫≠p l√™n tr√™n canvas_Camera + Timer 0
        """
        if self.active_cam:
            frame = self.active_cam.get_frame()
            if frame is not None: 
                self.canvas_Camera.set_image(frame, link_image = None)
            else:
                '''Camera m·∫•t k·∫øt n·ªëi khi ƒëang stream'''
                self.timer_0.stop()
                self.active_cam = None
                self.active_name = None
                self.ui.btn_choose_cam.setCurrentText("None")

    def capture_frame(self)-> None:
        """
        D√πng ƒë·ªÉ ch·ª•p ·∫£nh l·∫°i v√† s·∫Ω l∆∞u v√†o folder
        """
        if self.active_cam:
            frame = self.active_cam.get_frame()
            if frame is not None:
                cv2.imshow(f"Captured from {self.active_name}", frame)
                cv2.waitKey(1)

