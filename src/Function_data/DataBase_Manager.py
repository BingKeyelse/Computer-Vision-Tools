from libs import*

class DatabaseController:
    def __init__(self, ui, tool_manager, canvas, canvas_Sample, cam_function, current_file_path):
        """
        Qu·∫£n l√Ω v√† thao t√°c v·ªõi database ·ª©ng d·ª•ng.
        """
        

        self.ui = ui
        self.tool_manager= tool_manager
        self.canvas_Image= canvas
        self.canvas_Sample= canvas_Sample

        self.camera_function = cam_function
        self.current_file_path= current_file_path

        # L·∫•y ƒë∆∞·ªùng d·∫´n
        # L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi c·ªßa file ƒëang ch·∫°y 
        
        self.database=['Data_matching.db']
        self.db_connections={}
        self.check_or_create_database()
    
    def check_or_create_database(self):
        """
        T·∫°o database v√† b·∫£ng m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a t·ªìn t·∫°i.
        """
        for db_name in self.database:
            print(self.current_file_path)
            db_path = os.path.join(self.current_file_path, "data", db_name)
            # print("Database Path:", db_path)  # Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n
         
            # T·∫°o connect t·ªõi database
            conn = sqlite3.connect(db_path)

            # T·∫°o tr·ªè chu·ªôt v·ªõi database
            cursor = conn.cursor()
            
            # T·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i n·∫øu c√≥ r·ªìi th√¨ b·ªè qua
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS Data_matching (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    coarse_scale FLOAT ,
                    limit_score FLOAT ,
                    max_object INT 
                )
            ''')
            conn.commit() # Commit k·∫øt n·ªëi
        
            # üîπ Ki·ªÉm tra b·∫£ng c√≥ d·ªØ li·ªáu ch∆∞a
            cursor.execute("SELECT COUNT(*) FROM Data_matching")
            count = cursor.fetchone()[0]

            # üîπ N·∫øu ch∆∞a c√≥, th√™m d√≤ng m·∫∑c ƒë·ªãnh
            if count == 0:
                cursor.execute('''
                    INSERT INTO Data_matching (coarse_scale, limit_score, max_object)
                    VALUES (0.6, 0.7, 1)
                ''')
                conn.commit()
        
            # L∆∞u k·∫øt n·ªëi
            self.db_connections[db_name] = conn
    
    def get_data_matching_values(self, idx, table_name)-> list:
        """
        L·∫•y to√†n b·ªô d·ªØ li·ªáu t·ª´ b·∫£ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.

        Args:
            idx (int):  Ch·ªâ s·ªë (0-based) trong self.database ƒë·ªÉ ch·ªçn file DB.
            table_name (str): T√™n b·∫£ng trong database (v√≠ d·ª• "Data_matching").
        """

        # L·∫•y t√™n database theo idx
        db_name = self.database[idx]
        conn = self.db_connections.get(db_name)
        if not conn:
            raise ValueError(f"Database '{db_name}' ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi")
    
        # L·∫•y tr·ªè chu·ªôt ra 
        cursor = conn.cursor()

        # Truy v·∫•n t·∫•t c·∫£ d·ªØ li·ªáu trong b·∫£ng
        try:
            cursor.execute(f"SELECT * FROM {table_name}")
            rows = cursor.fetchall()

            # L·∫•y t√™n c√°c c·ªôt ƒë·ªÉ bi·∫øt c·∫•u tr√∫c b·∫£ng
            col_names = [description[0] for description in cursor.description]

            # Gh√©p l·∫°i th√†nh danh s√°ch dict ƒë·ªÉ d·ªÖ d√πng
            results = [dict(zip(col_names, row)) for row in rows]
            # print(results)
            return results

        except sqlite3.OperationalError as e:
            print(f"L·ªói khi truy c·∫≠p b·∫£ng '{table_name}': {e}")
            return None
    
    def update_data_matching_values(self, idx, table_name, new_values):
        """
        C·∫≠p nh·∫≠t l·∫°i 3 gi√° tr·ªã (coarse_scale, limit_score, max_object) trong b·∫£ng ch·ªâ ƒë·ªãnh.
        - idx: ch·ªâ s·ªë database trong self.database
        - table_name: t√™n b·∫£ng (v√≠ d·ª• "Data_matching")
        - new_values: list ho·∫∑c tuple g·ªìm 3 gi√° tr·ªã [coarse_scale, limit_score, max_object]
        """
        
        # L·∫•y t√™n database theo idx
        db_name = self.database[idx]
        conn = self.db_connections.get(db_name)
        if not conn:
            raise ValueError(f"Database '{db_name}' ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi")
        
        # L·∫•y tr·ªè chu·ªôt ra 
        cursor = conn.cursor()

        # üîπ C·∫≠p nh·∫≠t v√†o d√≤ng ƒë·∫ßu ti√™n (id = 1), ho·∫∑c t√πy logic b·∫°n mu·ªën
        cursor.execute(f'''
            UPDATE {table_name}
            SET coarse_scale = ?,
                limit_score = ?,
                max_object = ?
            WHERE id = 1
        ''', (new_values[0], new_values[1], new_values[2]))

        conn.commit()
